diff --git a/dom/network/NetworkStatsService.jsm b/dom/network/NetworkStatsService.jsm
--- a/dom/network/NetworkStatsService.jsm
+++ b/dom/network/NetworkStatsService.jsm
@@ -23,16 +23,18 @@ Cu.import("resource://gre/modules/Timer.
 const NET_NETWORKSTATSSERVICE_CONTRACTID = "@mozilla.org/network/netstatsservice;1";
 const NET_NETWORKSTATSSERVICE_CID = Components.ID("{18725604-e9ac-488a-8aa0-2471e7f6c0a4}");
 
 const TOPIC_BANDWIDTH_CONTROL = "netd-bandwidth-control"
 
 const TOPIC_CONNECTION_STATE_CHANGED = "network-connection-state-changed";
 const NET_TYPE_WIFI = Ci.nsINetworkInterface.NETWORK_TYPE_WIFI;
 const NET_TYPE_MOBILE = Ci.nsINetworkInterface.NETWORK_TYPE_MOBILE;
+const HTTP_ON_REQUEST = "http-on-modify-request";
+const HTTP_ON_RESPONSE = "http-on-examine-response";
 
 // Networks have different status that NetworkStats API needs to be aware of.
 // Network is present and ready, so NetworkManager provides the whole info.
 const NETWORK_STATUS_READY   = 0;
 // Network is present but hasn't established a connection yet (e.g. SIM that has not
 // enabled 3G since boot).
 const NETWORK_STATUS_STANDBY = 1;
 // Network is not present, but stored in database by the previous connections.
@@ -72,16 +74,18 @@ XPCOMUtils.defineLazyServiceGetter(this,
 this.NetworkStatsService = {
   init: function() {
     debug("Service started");
 
     Services.obs.addObserver(this, "xpcom-shutdown", false);
     Services.obs.addObserver(this, TOPIC_CONNECTION_STATE_CHANGED, false);
     Services.obs.addObserver(this, TOPIC_BANDWIDTH_CONTROL, false);
     Services.obs.addObserver(this, "profile-after-change", false);
+    Services.obs.addObserver(this, HTTP_ON_REQUEST, false);
+    Services.obs.addObserver(this, HTTP_ON_RESPONSE, false);
 
     this.timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
 
     // Object to store network interfaces, each network interface is composed
     // by a network object (network type and network Id) and a interfaceName
     // that contains the name of the physical interface (wlan0, rmnet0, etc.).
     // The network type can be 0 for wifi or 1 for mobile. On the other hand,
     // the network id is '0' for wifi or the iccid for mobile (SIM).
@@ -212,27 +216,45 @@ this.NetworkStatsService = {
             if (Object.getOwnPropertyNames(currentAlarm).length !== 0) {
               this._fireAlarm(currentAlarm.alarm);
             }
             break;
           }
         }
         break;
 
+      case HTTP_ON_REQUEST:
+        var result = {uri: aSubject.URI.spec,
+                      date: new Date()}; // Approximate, since it's set now, and not at request
+        ppmm.broadcastAsyncMessage("NetworkStatsService:Request", result);
+        break;
+
+      case HTTP_ON_RESPONSE:
+        var result = {contentLength: parseInt(aSubject.getResponseHeader("Content-Length")),
+                      date: new Date(aSubject.getResponseHeader("Date")),
+                      contentType: aSubject.getResponseHeader("Content-Type"),
+                      uri: aSubject.URI.spec,
+                      isNoCache: aSubject.isNoCacheResponse(),
+                      requestSucceeded: aSubject.requestSucceeded};
+        ppmm.broadcastAsyncMessage("NetworkStatsService:Response", result);
+        break;
+
       case "xpcom-shutdown":
         debug("Service shutdown");
 
         this.messages.forEach(function(aMsgName) {
           ppmm.removeMessageListener(aMsgName, this);
         }, this);
 
         Services.obs.removeObserver(this, "xpcom-shutdown");
         Services.obs.removeObserver(this, "profile-after-change");
         Services.obs.removeObserver(this, TOPIC_CONNECTION_STATE_CHANGED);
         Services.obs.removeObserver(this, TOPIC_BANDWIDTH_CONTROL);
+        Services.obs.removeObserver(this, HTTP_ON_REQUEST, false);
+        Services.obs.removeObserver(this, HTTP_ON_RESPONSE, false);
 
         this.timer.cancel();
         this.timer = null;
 
         // Update stats before shutdown
         this.updateAllStats();
         break;
     }
